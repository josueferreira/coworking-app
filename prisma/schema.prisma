// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Sala {
  id                String      @id @default(uuid())
  name              String
  slug              String
  numberPeoples     Int
  anexavel          Boolean
  description       String
  basePrice         Decimal     @db.Decimal(8, 2)
  imageUrls         String[]
  discountPercentage Int         @default(0)
  orderSalas        OrderSala[]
  salaHorarios      SalaHorario[]
}

model SalaHorario {
  id            String      @id @default(uuid())
  salaId        String
  sala          Sala        @relation(fields: [salaId], references: [id])
  startTime     DateTime     // Horário de início e termino no formato desejado (por exemplo, "8:00")
  endTime     DateTime
  orderSala      OrderSala[]
  createdAt   DateTime    @default(now())
}

model Opcional {
  id          Int        @id @default(autoincrement())
  name        String
  description String
  price       Decimal    @db.Decimal(8, 2)
  orderOpcionais OrderOpcional[]
}

model Order {
  id          String        @id @default(uuid())
  userId      String
  user        User          @relation(fields: [userId], references: [id])
  orderSalas  OrderSala[]
  totalPrice  Decimal       @db.Decimal(8, 2)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now()) @updatedAt
  status      OrderStatus   @default(WAITING_FOR_PAYMENT)
}

model OrderOpcional {
  id          String      @id @default(uuid())
  orderSalaId     String
  orderSala       OrderSala       @relation(fields: [orderSalaId], references: [id])
  opcionalId  Int
  opcional    Opcional    @relation(fields: [opcionalId], references: [id])
  quantity    Int
  createdAt   DateTime    @default(now())
}


enum OrderStatus {
  WAITING_FOR_PAYMENT
  PAYMENT_CONFIRMED
}

model OrderSala {
  id                 String  @id @default(uuid())
  salaId             String
  sala               Sala    @relation(fields: [salaId], references: [id])
  orderId            String
  order              Order   @relation(fields: [orderId], references: [id])
  basePrice          Decimal @db.Decimal(8, 2)
  discountPercentage Int     @default(0)
  salaHorario       SalaHorario[]
  orderOpcionais OrderOpcional[]
  createdAt   DateTime    @default(now())
}


model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Order         Order[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
